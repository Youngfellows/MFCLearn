CMyFrameWnd* pFrame = new CMyFrameWnd;
pFrame->LoadFrame( IDR_MENU1 )//函数内部this为pFrame
{
  CFrameWnd::LoadFrame(..)//函数内部this为pFrame
  {
    Create(..)//函数内部this为pFrame
    {
      CreateEx(..)//函数内部this为pFrame
      {
         //就会主框架窗口。
      }
    }
  }
}

**********************************************
OnFileNew内部执行过程
**********************************************
OnFileNew( )//函数内部this为&theApp
{
  m_pDocManager->OnFileNew()//函数内部this为文档管理类对象地址
  {
    CDocTemplate* pTemplate = m_templateList.GetHead();//取出多文档模板类对象地址
    pTemplate->OpenDocumentFile()//函数内部this为多文档模板类对象地址
    {
      OpenDocumentFile(..)//函数内部this为多文档模板类对象地址
      {
        pDocument = CreateNewDocument()//函数内部this为多文档模板类对象地址
        {
          CDocument* pDocument = m_pDocClass->CreateObject();
                               //动态创建文档类对象，并返回对象地址
          AddDocument(pDocument)//函数内部this为多文档模板类对象地址
          {
             m_docList.AddTail(pDoument);//将文档类对象扔到多文档模板类的链表成员中
          }
        }
        pFrame = CreateNewFrame(pDocument..)//函数内部this为多文档模板类对象地址
        {
          CCreateContext context;
	  ...
	  context.m_pCurrentDoc = pDocument;//文档类对象地址
	  context.m_pNewViewClass = m_pViewClass;//RUNTIME_CLASS(CMyView)
          CFrameWnd* pFrame = (CFrameWnd*)m_pFrameClass->CreateObject();
                               //动态创建框子架类对象，并返回对象地址
          pFrame->LoadFrame(...., &context);//创建子框架窗口
                      //后续过程看前二天的伪代码
        }
      }
    }
  }
}
***********************************************
绘图相关的
***********************************************
CPaintDC dc(pView) === CPaintDC::CPaintDC（...）//函数内部this为&dc
{
  Attach(::BeginPaint(pView->m_hWnd, &m_ps)）//函数内部this为&dc
  {
    m_hDC = hDC;//将BeginPaint获取的绘图设备句柄  保存到dc对象的一个成员变量中
    SetAttribDC(m_hDC)//函数内部this为&dc
    {
      m_hAttribDC = m_hDC;//dc对象的另一个成员变量也保存了绘图设备句柄
    }
  }
}

CPen pen(PS_SOLID, 2, RGB(255,0,0)) === CPen::CPen(PS_SOLID, 2, RGB(255,0,0))
//函数内部this &pen
{
  Attach(::CreatePen(PS_SOLID, 2, RGB(255,0,0))）//函数内部this &pen
  {
    m_hObject = hObject;//将::CreatePen获取的画笔句柄，保存到pen对象的一个成员变量中
  }
}


***********************************************
序列化数据的过程
***********************************************
class CArchive{        
        enum Mode { store = 0, load = 1…};
	BOOL m_nMode;  //访问方式
	int m_nBufSize;    //buff的大小
	CFile* m_pFile;     //操作的文件对象
	BYTE* m_lpBufCur;  //当前指向
	BYTE* m_lpBufMax;  //终止指向
	BYTE* m_lpBufStart;  //开始指向
	….
}	
CFile file;
file.Open( "E:/MFC/Day07/serial.txt", CFile::modeCreate | CFile::modeWrite );
CArchive ar(&file, CArchive::store, 4096) === CArchive::CArchive(&file，0， 4096)
{
  m_nMode = CArchive::store; // 0
  m_pFile = &file;//“E:/....serial.txt”
  m_nBufSize = 4096;
  m_lpBufStart = new BYTE[m_nBufSize];
  m_lpBufMax = m_lpBufStart + 4096;
  m_lpBufCur =  m_lpBufStart;
}

long age = 18;
ar << age === CArchive::operator<<(age)//函数内部this为&ar
{
  if (m_lpBufCur + sizeof(LONG) > m_lpBufMax) 
  {
    Flush();
  }
  *m_lpBufCur = age;
  m_lpBufCur += sizeof(LONG); 
}

float score = 88.5;
ar << score === CArchive::operator<<(score)//函数内部this为&ar
{
  if (m_lpBufCur + sizeof(float) > m_lpBufMax) 
  {
    Flush();
  }
  *m_lpBufCur = score;//88.5 
  m_lpBufCur += sizeof(float);
}

CString name = "zhangsan";  
ar << name === CArchive::operator<<(name)//函数内部this为&ar
{
  AfxWriteStringLength(ar, 8 )
  {
    ar<<(unsigned char)nLength;//8
  }
  Write(name, 8)//函数内部this为&ar
  {
    memcpy_s(m_lpBufCur, (size_t)(m_lpBufMax - m_lpBufCur), name, 8);
    m_lpBufCur += 8;
  }
}

ar.Close( )//函数内部this为&ar
{
  Flush()//函数内部this为&ar
  {
    &file->Write(m_lpBufStart, ULONG(m_lpBufCur - m_lpBufStart));
    m_lpBufCur = m_lpBufStart;//重置当前指向
  }
}

              m_lpBufCur 
 18 88.5 8 zhangsan|
|--------------------------------------------------------------------|
|                                                                    |
m_lpBufStart                                                       m_lpBufMax 








