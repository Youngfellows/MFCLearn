CFile file;
file.Open("E:/MFC/Day08/serial.txt", CFile::modeCreate|CFile::modeWrite);
CArchive ar(&file, CArchive::store, 4096);//归档类对象,维护缓冲区。
CMyDoc data(18, 88.5, "zhangsan");
ar << &data === operator<<(ar, const &data)
{
  ar.WriteObject(&data)//函数内部this为&ar
  {
    CRuntimeClass* pClassRef = &data->GetRuntimeClass();//文档类静态变量
    WriteClass(pClassRef);//将类的相关信息（类名/类大小/类版本）存入ar维护的buff中
    (&data)->Serialize(ar)//函数内部this为&data
    {
      ar << this->m_age << this->m_score << this->m_name; //序列化基本类型变量
    }
  }
}

CFile file;
file.Open( "E:/MFC/day08/serial.txt", CFile::modeRead );
CArchive ar( &file, CArchive::load, 4096 );//维护一个buff，大小4096字节
CMyDoc* pdata = NULL;//????????????
ar >> pdata === operator>>(ar, pdata) 
{
  pdata = ar.ReadObject(RUNTIME_CLASS(CMyDoc))//函数内部this为&ar
  {
    CRuntimeClass* pClassRef = ReadClass(RUNTIME_CLASS(CMyDoc),...);
           //从文件读取 类的相关信息，和 RUNTIME_CLASS(CMyDoc)中信息进行比对，
           //如果相同返回RUNTIME_CLASS(CMyDoc),如果不同返回NULL
    CObject*pOb = RUNTIME_CLASS(CMyDoc)->CreateObject();
           //动态创建CMyDoc类的对象，并返回对象地址
    pOb->Serialize(ar)//函数内部this为刚刚创建的CMyDoc类对象（pOb）
    {
      ar >> m_age >> m_score >> m_name;//反序列化基本类型变量
    }
    return pOb;
  }
}
****************************************************
无模式对话框架构程序的执行过程
****************************************************
AFX_MODULE_STATE aaa;//当前程序模块状态信息
AFX_MODULE_THREAD_STATE bbb; //当前程序线程状态信息

CWinApp::CWinApp()//构造全局对象CMyWinApp theApp
{
  AFX_MODULE_STATE* pModuleState = AfxGetModuleState();
               //获取全局变量&aaa
  AFX_MODULE_THREAD_STATE* pThreadState = pModuleState->m_thread;
               //获取全局变量&bbb
  pThreadState->m_pCurrentWinThread = this;//将&theApp保存到bbb的一个成员中
  
  AfxGetThread()
  {
     AFX_MODULE_THREAD_STATE* pState = AfxGetModuleThreadState();//获取&bbb
     CWinThread* pThread = pState->m_pCurrentWinThread;
     return pThread;//返回的为&theApp
  }
  pModuleState->m_pCurrentWinApp = this;//将&theApp保存到aaa的一个成员中
  AfxGetApp()
  {
    return AfxGetModuleState()->m_pCurrentWinApp；//返回&theApp
  }
}
进入入口函数
WinMain(...)
{
  AfxWinMain(..)
  {
    CWinThread* pThread = AfxGetThread();
    CWinApp* pApp = AfxGetApp();//获取&theApp
    pApp->InitApplication();//利用theApp调用应用程序类的成员 虚函数（初始化）
    pThread->InitInstance()//利用theApp调用应用程序类的成员 虚函数（创建并显示无模式对话框）
    {
      CMyDlg* pdlg = new CMyDlg;
      pdlg->Create( IDD_DIALOG1 )//函数内部this为pdlg（自己new的对话框类对象地址）
      {
        CDialog::Create(MAKEINTRESOURCE(IDD_DIALOG1), ..)//函数内部this为pdlg
        {
          HRSRC hResource = ::FindResource(hInst, lpszTemplateName, RT_DIALOG);
	  HGLOBAL hTemplate = LoadResource(hInst, hResource);
                     //以上两行代码，查找并加载对话框资源
          CreateIndirect(MAKEINTRESOURCE(IDD_DIALOG1), ...)
          {
            LPCDLGTEMPLATE lpDialogTemplate = LockResource(hDialogTemplate);
            CreateIndirect(lpDialogTemplate..)
            {
              CreateDlgIndirect（...）
              {
                ::CreateDialogIndirect（...）;//以间接方式创建无模式对话框
              }
            }
          }

        }
      }
    }
    pThread->Run()//函数内部this为&theApp
    {
      CWinThread::Run()//函数内部this为&theApp
      {
        for (;;)
        {
          while(没有消息时)
          {
            OnIdle(..);//空闲处理（虚函数）
          }
          do
          {
            if(::GetMessage抓到WM_QUIT消息)
               return ExitInstance(..);//善后处理（虚函数） 
          }while(...)
        }
      }
    }
  }
}
******************************
父类，处理点击OK按钮发出的WM_COMMAND消息
******************************
CDialog::OnOK()
{
  EndDialog(IDOK)
  {
    ::EndDialog(m_hWnd, nResult);//只能将无模式对话框隐藏
  }
}

****************************************************
模式对话框架构程序的执行过程
****************************************************
AFX_MODULE_STATE aaa;//当前程序模块状态信息
AFX_MODULE_THREAD_STATE bbb; //当前程序线程状态信息

CWinApp::CWinApp()//构造全局对象CMyWinApp theApp
{
  AFX_MODULE_STATE* pModuleState = AfxGetModuleState();
               //获取全局变量&aaa
  AFX_MODULE_THREAD_STATE* pThreadState = pModuleState->m_thread;
               //获取全局变量&bbb
  pThreadState->m_pCurrentWinThread = this;//将&theApp保存到bbb的一个成员中
  
  AfxGetThread()
  {
     AFX_MODULE_THREAD_STATE* pState = AfxGetModuleThreadState();//获取&bbb
     CWinThread* pThread = pState->m_pCurrentWinThread;
     return pThread;//返回的为&theApp
  }
  pModuleState->m_pCurrentWinApp = this;//将&theApp保存到aaa的一个成员中
  AfxGetApp()
  {
    return AfxGetModuleState()->m_pCurrentWinApp；//返回&theApp
  }
}
进入入口函数
WinMain(...)
{
  AfxWinMain(..)
  {
    CWinThread* pThread = AfxGetThread();
    CWinApp* pApp = AfxGetApp();//获取&theApp
    pApp->InitApplication();//利用theApp调用应用程序类的成员 虚函数（初始化）
    pThread->InitInstance()
    {
      	CMyDlg dlg===CDialog(IDD)//函数内部this为&dlg
        {
          m_lpszTemplateName=MAKEINTRESOURCE(IDD)//将对话框资源ID保存dlg的一个成员中
        }
	m_pMainWnd = &dlg;
	dlg.DoModal( )//函数内部this为&dlg
        {
          HRSRC hResource = ::FindResource(hInst, m_lpszTemplateName, RT_DIALOG);
	  hDialogTemplate = LoadResource(hInst, hResource);
	  lpDialogTemplate = (LPCDLGTEMPLATE)LockResource(hDialogTemplate);
                 //以上三行代码，查找加载并锁定对话框资源
          HWND hWndParent = PreModal();//获取父窗口的句柄
          ::EnableWindow(hWndParent, FALSE);//将父窗口设置为不可用状态
          CreateDlgIndirect(...)；//间接方式创建无模式对话框

          RunModalLoop(...)//函数内部this为&dlg
          {
            for (;;)  //消息循环
            {
              while(没有消息){ 空闲处理 }
              do{
                消息循环的相关函数;
                if (!ContinueModal())//函数内部this为&dlg（m_nFlags(24/8) & 0x0010）
		  goto ExitModal;


              }while(....);
            }
            ExitModal：
               return m_nModalResult;
          } 
        }
        ::EnableWindow(hWndParent, TRUE);//将父窗口设置为可用
        DestroyWindow();//销毁无模式对话框
        return m_nModalResult;//????dlg的一个成员变量
    }
  }
}
01000
10000
--------
00000


******************************
父类，处理点击OK按钮发出的WM_COMMAND消息
******************************
CDialog::OnOK()//函数内部this为&dlg
{
  EndDialog(IDOK) //参数为1
  {
    EndModalLoop(IDOK)//函数内部this为&dlg
    {
      m_nModalResult = IDOK; // 1
      m_nFlags = 8;
    }
    ::EndDialog(m_hWnd, nResult);//只能将无模式对话框隐藏
  }
}

CDialog::OnCancel()//函数内部this为&dlg
{
  EndDialog(IDCANCEL) //参数为2
  {
    EndModalLoop(IDCANCEL)//函数内部this为&dlg
    {
      m_nModalResult = IDCANCEL; // 1
      m_nFlags = 8;
    }
    ::EndDialog(m_hWnd, nResult);//只能将无模式对话框隐藏
  }
}


















